CREATE TABLE public."Information"
(
    information_id integer NOT NULL,
    "phoneNumber" character varying(20)[],
    email character varying(150)[],
    adress character varying(250)[],
    CONSTRAINT "Information_pkey" PRIMARY KEY (information_id)
);

CREATE TABLE public.employee
(
    employee_id serial NOT NULL,
    firstname character varying(50),
    lastname character varying(50),
    salary numeric(10, 2),
    information_id serial NOT NULL,
    CONSTRAINT employee_pkey PRIMARY KEY (employee_id),
    CONSTRAINT "information_id_FK_EMP" FOREIGN KEY (information_id)
        REFERENCES public."Information" (information_id)
);

CREATE TABLE public.cleaner
(
    cleaner_id serial NOT NULL,
    employee_id integer,
    CONSTRAINT cleaner_pkey PRIMARY KEY (cleaner_id),
    CONSTRAINT cleaner_employee_id_fkey FOREIGN KEY (employee_id)
        REFERENCES public.employee (employee_id)
);

CREATE TABLE public.manager
(
    manager_id serial NOT NULL,
    employee_id integer,
    CONSTRAINT manager_pkey PRIMARY KEY (manager_id),
    CONSTRAINT manager_employee_id_fkey FOREIGN KEY (employee_id)
        REFERENCES public.employee (employee_id)
);

CREATE TABLE public.stock
(
    stock_id serial NOT NULL,
    name character varying(100),
    quantity integer,
    price numeric(10, 2),
    is_meal boolean,
    restauant_manager_id integer,
    CONSTRAINT stock_pkey PRIMARY KEY (stock_id),
    CONSTRAINT stock_restauant_manager_id_fkey FOREIGN KEY (restauant_manager_id)
        REFERENCES public.manager (manager_id)
);

CREATE TABLE public.composition
(
    meal_id integer NOT NULL,
    ingredient_id integer NOT NULL,
    quantity integer,
    CONSTRAINT composition_pkey PRIMARY KEY (meal_id, ingredient_id),
    CONSTRAINT composition_ingredient_id_fkey FOREIGN KEY (ingredient_id)
        REFERENCES public.stock (stock_id),
    CONSTRAINT composition_meal_id_fkey FOREIGN KEY (meal_id)
        REFERENCES public.stock (stock_id)
);

CREATE TABLE public.id
(
    id_id serial NOT NULL,
    document_number character varying(50),
    expiration_date date,
    country character varying(50),
    CONSTRAINT id_pkey PRIMARY KEY (id_id)
);

CREATE TABLE public.customer
(
    customer_id serial NOT NULL,
    customer_gender character varying(10),
    customer_firstname character varying(50),
    customer_lastname character varying(50),
    id_id integer,
    information_id serial NOT NULL,
    CONSTRAINT customer_pkey PRIMARY KEY (customer_id),
    CONSTRAINT customer_id_id_fkey FOREIGN KEY (id_id)
        REFERENCES public.id (id_id),
    CONSTRAINT "information_id_FK" FOREIGN KEY (information_id)
        REFERENCES public."Information" (information_id)
);

CREATE TABLE public.extratype
(
    extratype_id serial NOT NULL,
    name character varying(100),
    price numeric(10, 2),
    CONSTRAINT extratype_pkey PRIMARY KEY (extratype_id)
);

CREATE TABLE public.payment
(
    payment_id serial NOT NULL,
    payment_type character varying(50),
    payment_date date,
    CONSTRAINT payment_pkey PRIMARY KEY (payment_id)
);

CREATE TABLE public.receptionist
(
    receptionist_id serial NOT NULL,
    employee_id integer,
    CONSTRAINT receptionist_pkey PRIMARY KEY (receptionist_id),
    CONSTRAINT receptionist_employee_id_fkey FOREIGN KEY (employee_id)
        REFERENCES public.employee (employee_id)
);

CREATE TABLE public.room
(
    number integer NOT NULL,
    floor integer,
    availability boolean,
    price numeric(10, 2),
    CONSTRAINT room_pkey PRIMARY KEY (number)
);

CREATE TABLE public.reservation
(
    reservation_id serial NOT NULL,
    check_in_date date,
    check_out_date date,
    status character varying(20),
    customer_id integer,
    number integer,
    receiptionist_id integer,
    CONSTRAINT reservation_pkey PRIMARY KEY (reservation_id),
    CONSTRAINT reservation_customer_id_fkey FOREIGN KEY (customer_id)
        REFERENCES public.customer (customer_id),
    CONSTRAINT reservation_receiptionist_id_fkey FOREIGN KEY (receiptionist_id)
        REFERENCES public.receptionist (receptionist_id),
    CONSTRAINT reservation_number_fkey FOREIGN KEY (number)
        REFERENCES public.room (number)
);

CREATE TABLE public.invoices
(
    invoice_id serial NOT NULL,
    invoice_total numeric(10, 2),
    status character varying(20),
    date date,
    additional_charges numeric(10, 2),
    payment_id integer,
    reservation_id integer,
    CONSTRAINT invoices_pkey PRIMARY KEY (invoice_id),
    CONSTRAINT invoices_payment_id_fkey FOREIGN KEY (payment_id)
        REFERENCES public.payment (payment_id),
    CONSTRAINT invoices_reservation_id_fkey FOREIGN KEY (reservation_id)
        REFERENCES public.reservation (reservation_id)
);

CREATE TABLE public.extra
(
    extra_id serial NOT NULL,
    date date,
    quantity integer,
    extratype_id integer,
    number integer,
    invoice_id integer,
    CONSTRAINT extra_pkey PRIMARY KEY (extra_id),
    CONSTRAINT extra_extratype_id_fkey FOREIGN KEY (extratype_id)
        REFERENCES public.extratype (extratype_id),
    CONSTRAINT extra_invoice_id_fkey FOREIGN KEY (invoice_id)
        REFERENCES public.invoices (invoice_id),
    CONSTRAINT extra_number_fkey FOREIGN KEY (number)
        REFERENCES public.room (number)
);


CREATE TABLE public.havetoclean
(
    cleaner_id integer NOT NULL,
    number integer NOT NULL,
    date date,
    CONSTRAINT havetoclean_pkey PRIMARY KEY (cleaner_id, number),
    CONSTRAINT havetoclean_cleaner_id_fkey FOREIGN KEY (cleaner_id)
        REFERENCES public.cleaner (cleaner_id),
    CONSTRAINT havetoclean_number_fkey FOREIGN KEY (number)
        REFERENCES public.room (number)
);






CREATE TABLE public.tablereservation
(
    reservation_id integer NOT NULL,
    no_table integer NOT NULL,
    date date,
    nb_customers integer,
    number integer,
    restauant_manager_id integer,
    CONSTRAINT tablereservation_pkey PRIMARY KEY (reservation_id),
    CONSTRAINT tablereservation_reservation_id_fkey FOREIGN KEY (reservation_id)
        REFERENCES public.reservation (reservation_id),
    CONSTRAINT tablereservation_restauant_manager_id_fkey FOREIGN KEY (restauant_manager_id)
        REFERENCES public.manager (manager_id),
    CONSTRAINT tablereservation_number_fkey FOREIGN KEY (number)
        REFERENCES public.room (number)
);

CREATE TABLE public.task
(
    id_task serial NOT NULL,
    task_date date,
    task_time time without time zone,
    employee_id integer,
    manager_id integer,
    task_name character varying(200)[],
    CONSTRAINT task_pkey PRIMARY KEY (id_task),
    CONSTRAINT task_employee_id_fkey FOREIGN KEY (employee_id)
        REFERENCES public.employee (employee_id),
    CONSTRAINT task_manager_id_fkey FOREIGN KEY (manager_id)
        REFERENCES public.manager (manager_id)
);

CREATE TABLE public.to_do
(
    id_task integer NOT NULL,
    id_employee integer NOT NULL,
    CONSTRAINT to_do_pkey PRIMARY KEY (id_task, id_employee),
    CONSTRAINT to_do_id_employee_fkey FOREIGN KEY (id_employee)
        REFERENCES public.employee (employee_id),
    CONSTRAINT to_do_id_task_fkey FOREIGN KEY (id_task)
        REFERENCES public.task (id_task)
);

